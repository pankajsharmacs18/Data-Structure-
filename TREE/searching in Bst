package binaryTree;

import java.util.Scanner;

class Node
{
    Node left;
    Node right;
    int data;
    public Node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
}
class BstImplement
{
    Node root;
    public void insertVal(int value)
    {
        root=insert(root,value);
    }
    public Node insert(Node root,int value)
    {

        if(root==null)
        {
            root=new Node(value);
            return root;
        }
        if(value<root.data)
        {
            root.left=insert(root.left,value);
        }
        if(value>root.data)
        {
            root.right=insert(root.right,value);
        }
        return root;
    }
    public void serchValue(int value)
    {
        search(root,value);
    }
    public void search(Node root,int value) {
        try {
            if (value == root.data) {
                System.out.println("value is found ");
                return;
            }
            if (value > root.data) {
                search(root.right, value);
            } else {
                search(root.left, value);
            }

        } catch (NullPointerException e) {
            System.out.println(e);
        }
    }
    public void printInOrder(Node node)
    {
        if(node==null)
        {
            return;
        }
        printInOrder(node.left);
        System.out.print(node.data+" , ");

        printInOrder(node.right);
    }
     void printInOrder()
    {
        printInOrder(root);
    }
}
public class BstMain
{
    public static void main(String... PankajSharma)
    {
        Scanner sc=new Scanner(System.in);
        BstImplement tree=new BstImplement();

        tree.insertVal(8);
        tree.insertVal(44);
        tree.insertVal(3);
        tree.insertVal(4);
        tree.insertVal(4);
        tree.insertVal(1);
        tree.insertVal(6);
        tree.insertVal(5);
        tree.insertVal(7);
        tree.insertVal(2);
        tree.insertVal(0);
        tree.insertVal(9);
        tree.insertVal(10);
        tree.printInOrder();
        tree.serchValue(100);
        System.out.println("Pankaj sharma  :");
    }
}
package binaryTree;

import java.util.Scanner;

class Node
{
    Node left;
    Node right;
    int data;
    public Node(int data)
    {
        this.data=data;
        left=null;
        right=null;
    }
}
class BstImplement
{
    Node root;
    public void insertVal(int value)
    {
        root=insert(root,value);
    }
    public Node insert(Node root,int value)
    {

        if(root==null)
        {
            root=new Node(value);
            return root;
        }
        if(value<root.data)
        {
            root.left=insert(root.left,value);
        }
        if(value>root.data)
        {
            root.right=insert(root.right,value);
        }
        return root;
    }
    public void serchValue(int value)
    {
        search(root,value);
    }
    public void search(Node root,int value) {
        try {
            if (value == root.data) {
                System.out.println("value is found ");
                return;
            }
            if (value > root.data) {
                search(root.right, value);
            } else {
                search(root.left, value);
            }

        } catch (NullPointerException e) {
            System.out.println(e);
        }
    }
    public void printInOrder(Node node)
    {
        if(node==null)
        {
            return;
        }
        printInOrder(node.left);
        System.out.print(node.data+" , ");

        printInOrder(node.right);
    }
     void printInOrder()
    {
        printInOrder(root);
    }
}
public class BstMain
{
    public static void main(String... PankajSharma)
    {
        Scanner sc=new Scanner(System.in);
        BstImplement tree=new BstImplement();

        tree.insertVal(8);
        tree.insertVal(44);
        tree.insertVal(3);
        tree.insertVal(4);
        tree.insertVal(4);
        tree.insertVal(1);
        tree.insertVal(6);
        tree.insertVal(5);
        tree.insertVal(7);
        tree.insertVal(2);
        tree.insertVal(0);
        tree.insertVal(9);
        tree.insertVal(10);
        tree.printInOrder();
        tree.serchValue(100);
        System.out.println("Pankaj sharma  :");
    }
}
