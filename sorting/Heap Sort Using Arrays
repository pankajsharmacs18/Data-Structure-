package heapSort;

import java.util.Scanner;

class Sort
{
    Scanner sc=new Scanner(System.in);
    public void sort(int[] arr)
    {
        int n=arr.length;
        // Build heap (rearrange arrays)
        for (int i = n/2-1; i>=0 ; i--)
        {
        heapify(arr,n,i);
        }
        //One by One extract an element from heap
        for (int i = n-1; i >0 ; i--)
        {
        //Swap last elment from one
        int temp=arr[0];
        arr[0]=arr[i];
        arr[i]=temp;
        heapify(arr,i,0);
        }
    }
    // To heapify a subtree rooted with noed i which is
    // an index in arr[] . n is size of heap
    public void heapify(int[] arr,int n,int i)
    {
        int lar=i; //Intialize largest as root
        int l=2*i+1; // Left
        int r=2*i+2; //Right
        //If left chield is larger then root
        if(l<n && arr[l]>arr[lar])
        {
            lar=l;
        }
       // if right chield is larger then largest so far
       if (r<n && arr[r]>arr[lar])
       {
           lar=r;
       }
       //If largest is not root
        if (lar!=i)
        {

            int swap=arr[i];
            arr[i]=arr[lar];
            arr[lar]=swap;
            heapify(arr,n,lar);
        }
    }
    public void display(int[] arr)
    {
        for (int i = 0; i <arr.length ; i++)
        {
            System.out.print(arr[i]+" ");
        }
    }
    public void insert(int[] arr)
    {
        for (int i = 0; i <arr.length ; i++)
        {
        arr[i]=sc.nextInt();
        }
    }
}
public class HeapSortMain
{
    public static void main(String... PankajSharma)
    {
        Sort obj=new Sort();
        Scanner sc=new Scanner(System.in);
        System.out.println("Enter size of arrasy : ");
        int[] arr=new int[sc.nextInt()];
        obj.insert(arr);
        obj.display(arr);
        obj.sort(arr);
        System.out.println("sorted arrays is \n ");
        obj.display(arr);
        System.out.println("Pankaj Sharma");
    }
}
